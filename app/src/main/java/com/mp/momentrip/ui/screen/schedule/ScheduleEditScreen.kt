package com.mp.momentrip.ui.screen.schedule

import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.background
import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.FlowRow
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.Button
import androidx.compose.material3.ButtonDefaults
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.OutlinedButton
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.OutlinedTextFieldDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.core.util.toRange
import com.maxkeppeker.sheets.core.models.base.rememberUseCaseState
import com.maxkeppeler.sheets.calendar.CalendarDialog
import com.maxkeppeler.sheets.calendar.models.CalendarConfig
import com.maxkeppeler.sheets.calendar.models.CalendarSelection
import com.maxkeppeler.sheets.calendar.models.CalendarStyle
import com.mp.momentrip.data.schedule.Schedule
import com.mp.momentrip.ui.screen.loading.AiLoadingScreen
import com.mp.momentrip.view.RecommendViewModel
import com.mp.momentrip.view.UserViewModel
import java.time.LocalDate
import java.time.format.DateTimeFormatter


@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ScheduleCreationScreen(
    userViewModel: UserViewModel,
    recommendViewModel: RecommendViewModel,
    onScheduleCreated: (Schedule) -> Unit
) {
    val primaryBlue  = MaterialTheme.colorScheme.primary
    val outlineGray  = Color(0xFFE5E9F2)
    val surfaceWhite = Color.White

    var title      by remember { mutableStateOf("") }
    var region     by remember { mutableStateOf("") }
    var startDate  by remember { mutableStateOf<LocalDate?>(null) }
    var endDate    by remember { mutableStateOf<LocalDate?>(null) }
    var error      by remember { mutableStateOf<String?>(null) }
    var isCreating by remember { mutableStateOf(false) }
    var isGenerating by remember { mutableStateOf(false) }

    val calendarState = rememberUseCaseState()
    val boundary = LocalDate.now().minusYears(2)..LocalDate.now().plusYears(2)
    val defaultRange = LocalDate.now().plusDays(1)..LocalDate.now().plusDays(4)

    val autoSchedule by recommendViewModel.autoGeneratedSchedule.collectAsState()

    // ‚è≥ ÏÉùÏÑ± ÏôÑÎ£å Ïãú ÏΩúÎ∞± Ïã§Ìñâ
    LaunchedEffect(autoSchedule) {
        if (isGenerating && autoSchedule != null) {
            isGenerating = false
            onScheduleCreated(autoSchedule!!)
        }
    }

    // ‚è≥ Î°úÎî© Ï§ë ÌôîÎ©¥
    if (isGenerating) {
        AiLoadingScreen()
        return
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(horizontal = 24.dp)
            .verticalScroll(rememberScrollState())
    ) {
        Spacer(Modifier.height(24.dp))

        Text(
            text = "ÏÉàÎ°úÏö¥ Ïó¨Ìñâ",
            style = MaterialTheme.typography.headlineSmall,
            modifier = Modifier.fillMaxWidth(),
            textAlign = TextAlign.Center
        )

        Spacer(Modifier.height(32.dp))

        /* Ï†úÎ™© */
        Label("Ïó¨Ìñâ Ïù¥Î¶Ñ")
        OutlinedTextField(
            value = title,
            onValueChange = { title = it },
            modifier = Modifier
                .fillMaxWidth()
                .border(1.dp, outlineGray, RoundedCornerShape(16.dp))
                .background(surfaceWhite, RoundedCornerShape(16.dp)),
            shape = RoundedCornerShape(16.dp),
            colors = OutlinedTextFieldDefaults.colors(
                focusedBorderColor = primaryBlue,
                unfocusedBorderColor = Color.Transparent,
                focusedContainerColor = surfaceWhite,
                unfocusedContainerColor = surfaceWhite,
            ),
            textStyle = MaterialTheme.typography.bodyLarge
        )

        Spacer(Modifier.height(28.dp))

        /* ÎÇ†Ïßú */
        Label("ÎÇ†Ïßú")
        DateSelectionCard(startDate, endDate, outlineGray, surfaceWhite) {
            calendarState.show()
        }

        Spacer(Modifier.height(28.dp))

        /* ÏßÄÏó≠ */
        Label("Ïó¨Ìñâ ÏßÄÏó≠")
        RegionSelectorCard(
            selectedRegion = region,
            onRegionSelected = { region = it },
            outlineGray = outlineGray,
            primaryBlue = primaryBlue,
            surfaceWhite = surfaceWhite
        )

        Spacer(Modifier.height(32.dp))

        /* ÏóêÎü¨ Î©îÏãúÏßÄ */
        error?.let {
            Text(text = it, color = Color.Red, style = MaterialTheme.typography.bodyMedium)
            Spacer(Modifier.height(8.dp))
        }
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            // ÏùºÎ∞ò ÏùºÏ†ï ÎßåÎì§Í∏∞
            Button(
                onClick = {
                    if (region.isNotEmpty() && startDate != null && endDate != null) {
                        isCreating = true
                        userViewModel.createSchedule(
                            title = title,
                            region = region,
                            startDate = startDate!!,
                            endDate = endDate!!,
                            onSuccess = {
                                isCreating = false
                                onScheduleCreated(autoSchedule!!)
                            },
                            onError = { msg -> isCreating = false; error = msg }
                        )
                    } else {
                        error = "Ïó¨Ìñâ ÎÇ†ÏßúÏôÄ ÏßÄÏó≠ÏùÑ Î™®Îëê ÏÑ†ÌÉùÌïòÏÑ∏Ïöî."
                    }
                },
                enabled = !isCreating,
                modifier = Modifier
                    .weight(1f)
                    .height(52.dp),
                shape = RoundedCornerShape(14.dp)
            ) {
                Text("Ï∂îÍ∞Ä", style = MaterialTheme.typography.titleSmall)
            }

            // AI ÏùºÏ†ï ÏÉùÏÑ±
            OutlinedButton(
                onClick = {
                    if (region.isNotEmpty() && startDate != null && endDate != null) {
                        isGenerating = true
                        recommendViewModel.generateAutoSchedule(
                            userViewModel = userViewModel,
                            region = region,
                            startDate = startDate!!,
                            endDate = endDate!!,
                            onSuccess = { onScheduleCreated(it) }
                        )
                    } else {
                        error = "Ïó¨Ìñâ ÎÇ†ÏßúÏôÄ ÏßÄÏó≠ÏùÑ Î™®Îëê ÏÑ†ÌÉùÌïòÏÑ∏Ïöî."
                    }
                },
                enabled = !isCreating && !isGenerating,
                modifier = Modifier
                    .weight(1f)
                    .height(52.dp),
                shape = RoundedCornerShape(14.dp),
                border = BorderStroke(1.dp, primaryBlue),
                colors = ButtonDefaults.outlinedButtonColors(contentColor = primaryBlue)
            ) {
                Text("ü§ñ AI ÏùºÏ†ï ÏÉùÏÑ±", style = MaterialTheme.typography.titleSmall)
            }
        }


        Spacer(Modifier.height(48.dp))
    }

    CalendarDialog(
        state = calendarState,
        config = CalendarConfig(
            yearSelection = true,
            monthSelection = true,
            boundary = boundary,
            style = CalendarStyle.MONTH
        ),
        selection = CalendarSelection.Period(
            selectedRange = defaultRange.toRange()
        ) { s, e -> startDate = s; endDate = e }
    )
}

@Composable
private fun Label(text: String) =
    Text(
        text = text,
        color = Color(0xFF8E8E93),
        style = MaterialTheme.typography.labelLarge,
        modifier = Modifier.padding(bottom = 8.dp)
    )

@Composable
private fun DateSelectionCard(
    startDate: LocalDate?,
    endDate: LocalDate?,
    outlineGray: Color,
    surfaceWhite: Color,
    onClick: () -> Unit
) {
    val formatter = DateTimeFormatter.ofPattern("yyyy.MM.dd")
    val label = if (startDate != null && endDate != null)
        "${startDate.format(formatter)}  ‚Äì  ${endDate.format(formatter)}"
    else "ÎÇ†ÏßúÎ•º ÏÑ†ÌÉùÌïòÏÑ∏Ïöî"

    Box(
        modifier = Modifier
            .fillMaxWidth()
            .border(1.dp, outlineGray, RoundedCornerShape(16.dp))
            .background(surfaceWhite, RoundedCornerShape(16.dp))
            .clickable { onClick() }
            .padding(20.dp)
    ) {
        Text(
            text = label,
            style = MaterialTheme.typography.bodyLarge,
            color = if (startDate != null) MaterialTheme.colorScheme.onSurface else Color.Gray
        )
    }
}

@Composable
private fun RegionSelectorCard(
    selectedRegion: String,
    onRegionSelected: (String) -> Unit,
    outlineGray: Color,
    primaryBlue: Color,
    surfaceWhite: Color
) {
    val regions = listOf(
        "ÏÑúÏö∏", "Ïù∏Ï≤ú", "ÎåÄÏ†Ñ", "ÎåÄÍµ¨", "Í¥ëÏ£º", "Î∂ÄÏÇ∞", "Ïö∏ÏÇ∞", "ÏÑ∏Ï¢Ö",
        "Í≤ΩÍ∏∞", "Í∞ïÏõê", "Ï∂©Î∂Å", "Ï∂©ÎÇ®", "Ï†ÑÎ∂Å", "Ï†ÑÎÇ®", "Í≤ΩÎ∂Å", "Í≤ΩÎÇ®", "Ï†úÏ£º"
    )

    FlowRow(
        modifier = Modifier
            .fillMaxWidth()
            .padding(12.dp),
        horizontalArrangement = Arrangement.spacedBy(12.dp),
        verticalArrangement = Arrangement.spacedBy(12.dp),
        maxItemsInEachRow = 3
    ) {
        regions.forEach { region ->
            val selected = region == selectedRegion

            Box(
                modifier = Modifier
                    .fillMaxWidth(0.3f) // Ïπ¥Îìú ÎÑàÎπÑ ÎπÑÏú®
                    .height(48.dp)
                    .clip(RoundedCornerShape(16.dp))
                    .background(
                        if (selected) primaryBlue else surfaceWhite
                    )
                    .border(
                        width = if (selected) 0.dp else 1.dp,
                        color = if (selected) Color.Transparent else outlineGray,
                        shape = RoundedCornerShape(16.dp)
                    )
                    .clickable { onRegionSelected(region) },
                contentAlignment = Alignment.Center
            ) {
                Text(
                    text = region,
                    color = if (selected) Color.White else Color(0xFF1B1E28),
                    fontWeight = if (selected) FontWeight.Bold else FontWeight.Medium,
                    fontSize = 14.sp
                )
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
fun RegionSelectorCardPreview() {
    val selectedRegion = remember { mutableStateOf("ÏÑúÏö∏") }

    RegionSelectorCard(
        selectedRegion = selectedRegion.value,
        onRegionSelected = { selectedRegion.value = it },
        outlineGray = Color(0xFFE5E9F2),
        primaryBlue = Color(0xFF24BAEC),
        surfaceWhite = Color.White
    )
}
